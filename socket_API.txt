1. ACCEPT FUNCTION
#include <sys/types.h>
#include <sys/socket.h>
int accept(int s, struct sockaddr *addr, socklen_t *addrlen)
/* s - listening socket descriptor
*  addr - is a pointer to the address of connecting host
*  addrlen - is a pointer to the length of address of connecting host */
/* accept function returns integer which is the new socket file descriptor for the accepted connection */

2. BIND FUNCTION
#include <sys/types.h>
#include <sys/socket.h>
int bind(int s, struct sockaddr *addr, int addrlen)
/* s - socket file descriptor 
*  addr - is a pointer to the address of the server
*  addrlen - is a length of that address */

3. CONNECT FUNCTION
#include <sys/types.h>
#include <sys/socket.h>
int connect(int s, struct sockaddr *addr, int addrlen)
/* s - socket file descriptor
*  addr - is a pointer to the server's address and port
*  addrlen - is a length of the server's address */

4. LISTEN FUNCTION
#include <sys/types.h>
#include <sys/socket.h>
int listen(int s, int backlog)
/* s - socket file descriptor
*  backlog - is the number of incomming connection requests which are put in the queue */

5. SOCKET FUNCTION
#include <sys/types.h>
#include <sys/socket.h>
int socket(int proto_family, int proto_type, int protocol)
/* proto_family - is the protocol family: PF_INET, PF_UNIX
*  proto_type - is the protocol type: SOCK_STREAM, SOCK_DGRAM
*  protocol - is the protocol name: tcp, udp, etc */

6. SEND FUNCTION
#include <sys/types.h>
#include <sys/socket.h>
int send(int s, void *msg, int len, int flags)
/* s - is a socket file descriptor to send data to, commonly which created by the accept function
*  msg - is a generic pointer to the data you want to send
*  len - is the length of the sending data in bytes
*  flags - is integer flag, by default is zero */
/* send function returns the number of actually sent bytes and you must compare this
*  return value with the number of bytes you intended to send */

7. RECV FUNCTION
#include <sys/types.h>
#include <sys/socket.h>
int recv(int s, void *buf, int len, int flags)
/* s - is a socket file descriptor to receive data from
*  buf - is a pointer to a buffer to receive data from
*  len - is the length of buffer to receive data from
*  flags - is the integer flag, by default zero */
/* recv function returns the number of bytes read from the buffer.
   If recv returns 0 , you know that other end closed connection */

8. CLOSE FUNCTION
#include <unistd.h>
int close(int s);
/* s - socket file descriptor */

9. SHUTDOWN FUNCTION
#include <sys/socket.h>
int shutdown(int s, int type)
/* s - socket file descriptor,but shutdown doesn't close socket file descriptor,to close it
*  you still need to use close() function.
   type - there are 3 of them: 
   0 - no more receives;
   1 - no more sends;
   2 - no more sends and receives; */
   
10. GETADDRINFO FUNCTION
#include <sys/socket.h>
#include <sys/types.h>
#include <netdb.h>
int getaddrinfo(const char *addr, const char *service,
                  const struct addrinfo *source, struct addrinfo **result)
/* addr - is a pointer to internet domain address or IP address 
*  service - is a pointer to numeric port or service name like "udp", "tcp", etc
*  source - is a pointer to struct addrinfo which we populate when provide arguments *addr and *service
*  result - is a pointer to a linked-list of found addrinfo structs
/* NOTICE: after using getaddrinfo function we need to free allocated linked list of structures "result"
*  with call:  freeaddrinfo(result);

11. GETPEERNAME FUNCTION
#include <sys/socket.h>
int getpeername(int s, struct sockaddr *s_addr, socklen_t *length)
/* s - socket file descriptor 
*  addr - is a pointer to struct containing peer's information
* length - is a pointer to variable holding the length of peer's address struct */

12. INET_NTOP FUNCTION
#include <arpa/inet.h>
const char *inet_ntop(int af, const void *src, char *dst, socklen_t size)
/* af - address family: AF_INET, AF_INET6
*  src - is a pointer to struct: in_addr or in6_addr
*  dst - is a pointer to string where we want to place text presentation of internet address
*  size - is a maximum size in bytes of text presentation string
*  for the size use one of these macros: INET_ADDRSTRLEN, INET6_ADDRSTRLEN
*  this function returns dst pointer on success or NULL on failure */

13. INET_PTON FUNCTION
#incldude <arpa/inet.h>
int inet_pton(int af, const char *src, void *dst)
/* af - address family: AF_INET, AF_INET6
*  src - is a pointer to const string holding text presentation of internet address (suppose "24.77.91.74")
* this function used when we need to pack string presentation of internet address into
* struct in_addr or in6_addr  
* this function returns 1 on success, -1 on failure, 0 when src isn't correct internet address */

14. GETSOCKOPT FUNCTION
#include <sys/socket.h>
#include <sys/types.h>
int getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
/* s - socket file descriptor 
*  level - this should be set to SOL_SOCKET
*  optname - there are a lot of them.Typically consider these options:
* SO_BINDTODEVICE - bind socket to device name like ethx,so you don't need to bind to an ip address 
* SO_REUSEADDR - allows multiple sockets to bind to a specific port
* SO_BROADCAST - useful only for SOCK_DGRAM, allows for dgram sockets to send and receive packets sent to or from broadcast address
* optval - is a pointer pointer to a value in question
* optlen - is a pointer to a length of optval, commonly length is sizeof(int) */

15. SETSOCKOPT FUNCTION
#include <sys/socket.h>
#include <sys/types.h>
int setsockopt(int s, int level, int optname, const void *optval, socklen_t *optlen)
/* everything goes the same as with getsockopt() except that optval points to a const value */
